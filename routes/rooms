const express = require('express');
const router = express.Router();
const auth = require('../middleware/auth');
const { body, validationResult } = require('express-validator');

// Model
const Room = require('../models/Room');

// ***** Rooms CRUD ****

// @route   GET    api/rooms
// @desc    Get all rooms
// @access  Private
router.get('/', auth, async (req, res) => {
  try {
    const rooms = await Room.find({ user: req.user.id }).sort({
      number: 1,
    });
    res.send(rooms);
  } catch (error) {
    console.error(error.message);
    res.status(500).send('Server Error');
  }
});

// @route   POST    api/rooms
// @desc    Add new room
// @access  Private
router.post('/', auth, async (req, res) => {
  
  const { name, number, price } = req.body;

  try {
    const newRoom = new Room({
      name,
      number,
      price,
      user: req.user.id,
    });

    const room = await newRoom.save();

    res.json(room);
  } catch (error) {
    console.error(error.message);
    res.status(500).send('Server Error');
  }
});

// @route   PUT    api/rooms/:id
// @desc    Update room
// @access  Private
router.put('/:id', auth, async (req, res) => {
  const { name, number, price } = req.body;

  // Build room object
  const roomFields = {};
  if (name) roomFields.name = name;
  if (number) roomFields.number = number;
  if (price) roomFields.price = price;

  try {
    let room = await Room.findById(req.params.id);

    if (!room) return res.status(404).json({ msg: 'Room not found' });

    // Make sure user owns contact
    if (room.user.toString() !== req.user.id) {
      return res.status(401).json({ msg: 'Not authorized' });
    }

    room = await Room.findByIdAndUpdate(
      req.params.id,
      { $set: roomFields },
      { new: true }
    );

    res.json(room);
  } catch (err) {
    console.error(err.message);
    res.status(500).send('Server Error');
  }
});

// @route   DELETE    api/rooms/:id
// @desc    Delete contact
// @access  Private
router.delete('/:id', auth, async (req, res) => {
  try {
    let room = await Room.findById(req.params.id);

    if (!room) return res.status(404).json({ msg: 'Room not found' });

    // Make sure user owns room
    if (room.user.toString() !== req.user.id) {
      return res.status(401).json({ msg: 'Not authorized' });
    }

    await Room.findByIdAndRemove(req.params.id);

    res.json({ msg: 'Room removed' });
  } catch (err) {
    console.error(err.message);
    res.status(500).send('Server Error');
  }
});

module.exports = router;
